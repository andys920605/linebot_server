// Code generated by MockGen. DO NOT EDIT.
// Source: ilinebot_ext.go

// Package mock is a generated GoMock package.
package mock

import (
	service "linebot/models/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockILinebotExt is a mock of ILinebotExt interface.
type MockILinebotExt struct {
	ctrl     *gomock.Controller
	recorder *MockILinebotExtMockRecorder
}

// MockILinebotExtMockRecorder is the mock recorder for MockILinebotExt.
type MockILinebotExtMockRecorder struct {
	mock *MockILinebotExt
}

// NewMockILinebotExt creates a new mock instance.
func NewMockILinebotExt(ctrl *gomock.Controller) *MockILinebotExt {
	mock := &MockILinebotExt{ctrl: ctrl}
	mock.recorder = &MockILinebotExtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILinebotExt) EXPECT() *MockILinebotExtMockRecorder {
	return m.recorder
}

// BroadcastMessage mocks base method.
func (m *MockILinebotExt) BroadcastMessage(arg0 *service.BroadcastMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockILinebotExtMockRecorder) BroadcastMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockILinebotExt)(nil).BroadcastMessage), arg0)
}

// PushMessage mocks base method.
func (m *MockILinebotExt) PushMessage(arg0 string, arg1 *linebot.TextMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockILinebotExtMockRecorder) PushMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockILinebotExt)(nil).PushMessage), arg0, arg1)
}
