// Code generated by MockGen. DO NOT EDIT.
// Source: imember_rep.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	repository "linebot/models/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockIMemberRep is a mock of IMemberRep interface.
type MockIMemberRep struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberRepMockRecorder
}

// MockIMemberRepMockRecorder is the mock recorder for MockIMemberRep.
type MockIMemberRepMockRecorder struct {
	mock *MockIMemberRep
}

// NewMockIMemberRep creates a new mock instance.
func NewMockIMemberRep(ctrl *gomock.Controller) *MockIMemberRep {
	mock := &MockIMemberRep{ctrl: ctrl}
	mock.recorder = &MockIMemberRepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemberRep) EXPECT() *MockIMemberRepMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIMemberRep) FindAll(arg0 context.Context, arg1 string) (*[]repository.LineEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].(*[]repository.LineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIMemberRepMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIMemberRep)(nil).FindAll), arg0, arg1)
}

// Insert mocks base method.
func (m *MockIMemberRep) Insert(arg0 context.Context, arg1 *linebot.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIMemberRepMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIMemberRep)(nil).Insert), arg0, arg1)
}
