// Code generated by MockGen. DO NOT EDIT.
// Source: imember_svc.go

// Package mock is a generated GoMock package.
package mock

import (
	repository "linebot/models/repository"
	service "linebot/models/service"
	errs "linebot/utils/errs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockIMemberSvc is a mock of IMemberSvc interface.
type MockIMemberSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberSvcMockRecorder
}

// MockIMemberSvcMockRecorder is the mock recorder for MockIMemberSvc.
type MockIMemberSvcMockRecorder struct {
	mock *MockIMemberSvc
}

// NewMockIMemberSvc creates a new mock instance.
func NewMockIMemberSvc(ctrl *gomock.Controller) *MockIMemberSvc {
	mock := &MockIMemberSvc{ctrl: ctrl}
	mock.recorder = &MockIMemberSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemberSvc) EXPECT() *MockIMemberSvcMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockIMemberSvc) Broadcast(arg0 *service.BroadcastMessage) *errs.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", arg0)
	ret0, _ := ret[0].(*errs.ErrorResponse)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockIMemberSvcMockRecorder) Broadcast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockIMemberSvc)(nil).Broadcast), arg0)
}

// GetUserMessages mocks base method.
func (m *MockIMemberSvc) GetUserMessages(arg0 string) (*[]repository.LineEvent, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMessages", arg0)
	ret0, _ := ret[0].(*[]repository.LineEvent)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// GetUserMessages indicates an expected call of GetUserMessages.
func (mr *MockIMemberSvcMockRecorder) GetUserMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMessages", reflect.TypeOf((*MockIMemberSvc)(nil).GetUserMessages), arg0)
}

// Webhook mocks base method.
func (m *MockIMemberSvc) Webhook(arg0 []*linebot.Event) *errs.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Webhook", arg0)
	ret0, _ := ret[0].(*errs.ErrorResponse)
	return ret0
}

// Webhook indicates an expected call of Webhook.
func (mr *MockIMemberSvcMockRecorder) Webhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Webhook", reflect.TypeOf((*MockIMemberSvc)(nil).Webhook), arg0)
}
